generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LandingPage {
  id                       Int                          @id @default(autoincrement())
  
  // Direct relations for content thatâ€™s always tied to the landing page.
  heroSections             Hero[]
  partners                 Partner[]
  faqs                     FAQ[]
  visionAndMission         VisionAndMission[]
  footer                   Footer?

  // Join models for selectively featured content:
  featuredStartups         FeaturedStartup[]
  featuredHistoryAndValues FeaturedHistoryAndValues[]
  featuredEvents           FeaturedEvent[]
  featuredPrograms         FeaturedProgram[]
  featuredNews             FeaturedNews[]
}

model Hero {
  id            Int          @id @default(autoincrement())
  landingImage  String
  title         String
  description   String

  // Each hero section belongs to one landing page.
  landingPageId Int
  landingPage   LandingPage  @relation(fields: [landingPageId], references: [id])
}

model HistoryAndValues {
  id            Int     @id @default(autoincrement())
  title         String
  landingImage  String
  description   String

  FeaturedHistoryAndValues FeaturedHistoryAndValues[]
}

model Event {
  id            Int     @id @default(autoincrement())
  title         String
  landingImage  String
  description   String

  FeaturedEvent FeaturedEvent[]
}

model Program {
  id            Int     @id @default(autoincrement())
  title         String
  landingImage  String
  description   String

  FeaturedProgram FeaturedProgram[]
}

model News {
  id            Int     @id @default(autoincrement())
  title         String
  landingImage  String
  description   String

  FeaturedNews FeaturedNews[]
}

model Partner {
  id            Int          @id @default(autoincrement())
  landingPageId Int
  landingPage   LandingPage  @relation(fields: [landingPageId], references: [id])
  name          String
  logo          String
  url           String?
}

model FAQ {
  id            Int          @id @default(autoincrement())
  landingPageId Int
  landingPage   LandingPage  @relation(fields: [landingPageId], references: [id])
  question      String
  answer        String
  order         Int
}

model VisionAndMission {
  id            Int          @id @default(autoincrement())
  landingPageId Int
  landingPage   LandingPage  @relation(fields: [landingPageId], references: [id])
  vision        String
  mission       String
  order         Int
}

model Footer {
  id            Int          @id @default(autoincrement())
  landingPageId Int          @unique
  landingPage   LandingPage  @relation(fields: [landingPageId], references: [id])
  content       String
}

/// Join model to selectively feature HistoryAndValues items.
model FeaturedHistoryAndValues {
  id                 Int                @id @default(autoincrement())
  landingPageId      Int
  historyAndValuesId Int
  order              Int

  landingPage        LandingPage        @relation(fields: [landingPageId], references: [id])
  historyAndValues   HistoryAndValues   @relation(fields: [historyAndValuesId], references: [id])
}

/// Join model to selectively feature Event items.
model FeaturedEvent {
  id            Int         @id @default(autoincrement())
  landingPageId Int
  eventId       Int
  order         Int

  landingPage   LandingPage @relation(fields: [landingPageId], references: [id])
  event         Event       @relation(fields: [eventId], references: [id])
}

/// Join model to selectively feature Program items.
model FeaturedProgram {
  id            Int         @id @default(autoincrement())
  landingPageId Int
  programId     Int
  order         Int

  landingPage   LandingPage @relation(fields: [landingPageId], references: [id])
  program       Program     @relation(fields: [programId], references: [id])
}

/// Join model to selectively feature News items.
model FeaturedNews {
  id            Int         @id @default(autoincrement())
  landingPageId Int
  newsId        Int
  order         Int

  landingPage   LandingPage @relation(fields: [landingPageId], references: [id])
  news          News        @relation(fields: [newsId], references: [id])
}

/// Join model to selectively feature Startup items.
model FeaturedStartup {
  id            Int         @id @default(autoincrement())
  landingPageId Int
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id])
  startupId     Int
  startup       Startup     @relation(fields: [startupId], references: [id])
  order         Int
}

/// The Startup model represents incubated startups.
model Startup {
  id             Int                @id @default(autoincrement())
  name           String
  idea           String?            // Description of the idea
  imageUrl       String?            // URL for the startup image
  createdAt      DateTime           @default(now())
  
  // Relation: A startup can have many mentors.
  mentors        StartupMentor[]

  // Relation: A startup can have multiple founders.
  founders       StartupFounder[]

  featuredIn     FeaturedStartup[]
}

/// Join model for many-to-many relation between Startups and Mentors.
model StartupMentor {
  id         Int      @id @default(autoincrement())
  startupId  Int
  mentorId   String   // references a User with role MENTOR
  assignedAt DateTime @default(now())

  startup    Startup  @relation(fields: [startupId], references: [id])
  mentor     User     @relation(fields: [mentorId], references: [id])
}

/// Join model for many-to-many relation between Startups and Founders.
model StartupFounder {
  id         Int      @id @default(autoincrement())
  startupId  Int
  founderId  String   // references a User who is a founder
  joinedAt   DateTime @default(now())

  startup    Startup  @relation(fields: [startupId], references: [id])
  founder    User     @relation(fields: [founderId], references: [id])
}

/// Model to handle startup applications submitted via the form.
/// Users submit this form containing their contact details and startup idea.
/// The admin then reviews these submissions and either approves (which creates a Startup and account) or rejects them.
model StartupApplication {
  id           Int                @id @default(autoincrement())
  fullName     String
  email        String
  startupName  String
  idea         String
  details      String?            // Additional details if needed
  status       ApplicationStatus  @default(PENDING)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  USER
  ADMIN
  MENTOR
}

/// The User model represents both standard users and mentors (as well as admin accounts).
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // If the user is a mentor, they may be linked to startups via the StartupMentor join model.
  mentorFor StartupMentor[]

  // If the user is a founder, they may be linked to startups via the StartupFounder join model.
  foundedStartups StartupFounder[]
}
